SCRIPT STMT ; SCRIPT
SCRIPT

STMT connect " PATH "
STMT production NON_TERM to PATTERN
STMT select OBJECTIVE GRAPH

GRAPH GRAPH intersect OTHER_GRAPH
GRAPH OTHER_GRAPH
OTHER_GRAPH ( GRAPH )
OTHER_GRAPH query PATTERN
OTHER_GRAPH query grammar
OTHER_GRAPH name STRING
OTHER_GRAPH set_start_and_final ( VERTICES , VERTICES , GRAPH )

VERTICES set { SET }
VERTICES range ( INT ; INT )
VERTICES none
SET INT , SET
SET

OBJECTIVE ( OBJECTIVE )
OBJECTIVE EDGES
OBJECTIVE count EDGES
EDGES edges
EDGES filter ( PREDICATE ) EDGES

PREDICATE ( VERTEX_IDENT , EDGE_IDENT , VERTEX_IDENT ) satisfy BOOL_EXPR

BOOL_EXPR BOOL_EXPR or OTHER_BOOL_EXPR
BOOL_EXPR OTHER_BOOL_EXPR
OTHER_BOOL_EXPR OTHER_BOOL_EXPR and ANOTHER_BOOL_EXPR
OTHER_BOOL_EXPR ANOTHER_BOOL_EXPR
ANOTHER_BOOL_EXPR not ANOTHER_BOOL_EXPR
ANOTHER_BOOL_EXPR ATOMIC_BOOL_EXPR
ANOTHER_BOOL_EXPR ( BOOL_EXPR )

ATOMIC_BOOL_EXPR EDGE_IDENT has_label " STRING "
ATOMIC_BOOL_EXPR is_start VERTEX_IDENT
ATOMIC_BOOL_EXPR is_final VERTEX_IDENT

VERTEX_IDENT STRING
EDGE_IDENT STRING

PATTERN PATTERN alt OTHER_PATTERN
PATTERN OTHER_PATTERN
OTHER_PATTERN OTHER_PATTERN concat ANOTHER_PATTERN
OTHER_PATTERN ANOTHER_PATTERN
ANOTHER_PATTERN star ( ANOTHER_PATTERN )
ANOTHER_PATTERN plus ( ANOTHER_PATTERN )
ANOTHER_PATTERN option ( ANOTHER_PATTERN )
ANOTHER_PATTERN ( PATTERN )
ANOTHER_PATTERN USER_EPS
ANOTHER_PATTERN term ( STRING )
ANOTHER_PATTERN NON_TERM

NON_TERM var ( STRING )

PATH [/a-zA-Z0-9]*
STRING [a-zA-Z]*
INT [1-9][0-9]*
USER_EPS e